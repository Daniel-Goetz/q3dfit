#!/usr/bin/env python# -*- coding: utf-8 -*-"""This procedure is the core routine to fit the continuum and emission lines of a spectrum. As input, it requires a structure of initialization parameters.The tags for this structure can be found in INITTAGS.txt.Returns-------IDL save file (.xdr) Parameters----------initproc: in, required, type=string    Name of procedure to initialize the fit.cols: in, optional, type=intarr, default=all       Columns to fit, in 1-offset format. Either a scalar or a       two-element vector listing the first and last columns to fit.     ncores: in, optional, type=int, default=1       Number of cores to split processing over.     rows: in, optional, type=intarr, default=all       Rows to fit, in 1-offset format. Either a scalar or a       two-element vector listing the first and last rows to fit.     oned: in, optional, type=byte       Data is assumed to be in a 2d array  choose this switch to       input data as a 1d array.     onefit: in, optional, type=byte       Option to skip second fit  primarily for testing.     verbose: in, optional, type=byte       Print error and progress messages. Propagates to most/all       subroutines.History    2020may21, DSNR, copied header from IFSF.proCreated on Tue May 26 13:37:58 2020@author: drupke"""__author__ = 'Q3D Team'__credits__ = ['David S. N. Rupke']__created__ = '2020 May 21'__last_modified__ = '2020 May 28'def q3df( initproc, oned=None, onefit=None, verbose=None, **kwargs ):        import importlib    from q3dfit.common.linelist import linelist    #   This block reads in the dictionary from the master initialization file. #   The multi-step process is because initproc is a string variable. The#   initialization file must be in the init subdirectory of the Q3DFIT#   distribution for this to work. There may be a better way with an #   arbitrary path.    module = importlib.import_module('q3dfit.init.'+initproc)    fcninitproc = getattr(module,initproc)        initdat = fcninitproc()#   Get linelist    if initdat.__contains__('lines'):        if initdat.__contains__('argslinelist'):            # need to revisit this call to argslinelist, probably incorrect use of kwargs            linelist=linelist(initdat['lines'],initdat['argslinelist'])        else: linelist=linelist(initdat['lines'])    else: linelist=linelist()